#### Automatically build and upload releases to GitHub ####

on:
  push:
    tags:
      - "r*" # run this action if a tag beginning with r is created
  workflow_dispatch:

name:                               Publish Release
jobs:

  ## Creates the releases on GitHub ##
  create_release:
     name:                          Create release
     runs-on:                       ubuntu-latest
     outputs: # The outputs the following steps give back are sent to the other job
      upload_url:                   ${{ steps.create_release.outputs.upload_url }}
      upload_latest_url:            ${{ steps.create_latest_release.outputs.upload_url }}
      version:                      ${{ steps.jamulus-build-vars.outputs.JAMULUS_VERSION }}

     steps:
         - name:                    Checkout code
           uses:                    actions/checkout@v2
         - name:                    Get Jamulus build info # Gets Changelog and version of this build
           run:                     sh ${{ github.workspace }}/.github/actions_scripts/get_release_vars.sh ${{ github.workspace }}
           id:                      jamulus-build-vars
         - name:                    Remove latest tag # removes the "latest" tag from the last version
           uses:                    dev-drprasad/delete-tag-and-release@v0.1.2
           with:
             delete_release:        true
             tag_name:              latest # tag name to delete
           env:
             GITHUB_TOKEN:          ${{ secrets.GITHUB_TOKEN }}

         # Actually create the release on GitHub
         - name:                    Prepare latest release # create a release tagged latest
           id:                      create_latest_release
           uses:                    actions/create-release@v1
           env:
             GITHUB_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
           with:
             tag_name:              latest
             release_name:          Latest release ${{ steps.jamulus-build-vars.outputs.JAMULUS_VERSION }} (auto build)
             body_path:             ${{ github.workspace }}/autoLatestChangelog.md
             draft:                 false
             prerelease:            false

         - name:                    Prepare tag release # creates a release with the tag which triggered this action
           id:                      create_release
           uses:                    actions/create-release@v1
           env:
             GITHUB_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
           with:
             tag_name:              ${{ steps.jamulus-build-vars.outputs.PUSH_TAG }}
             release_name:          Release ${{ steps.jamulus-build-vars.outputs.JAMULUS_VERSION }} (auto build)
             body_path:             ${{ github.workspace }}/autoLatestChangelog.md
             draft:                 false
             prerelease:            false

  ## Builds and uploads the binaries ##
  release_assets:
    name:                           Release assets
    needs:                          create_release
    runs-on:                        ${{ matrix.config.os }}
    strategy:
      matrix: # Think of this like a foreach loop. Basically runs the steps with every combination of the contents of this. More info: https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
        config:
           - os:                    ubuntu-18.04
             asset_path:            deploy/Jamulus_amd64.deb
             asset_name:            jamulus_${{ needs.create_release.outputs.version }}_ubuntu_amd64.deb
             asset_latest_name:     jamulus_latest_ubuntu_amd64.deb
             asset_path_two:        deploy/Jamulus_headless_amd64.deb
             asset_name_two:        jamulus_headless_${{ needs.create_release.outputs.version }}_ubuntu_amd64.deb
             asset_latest_name_two: jamulus_headless_ubuntu_amd64.deb
           - os:                    macos-10.15
             asset_path:            deploy/Jamulus-installer-mac.dmg
             asset_name:            jamulus_${{ needs.create_release.outputs.version }}_mac.dmg
             asset_latest_name:     jamulus_latest_mac.dmg
           - os:                    windows-latest
             asset_path:            deploy\Jamulus-installer-win.exe
             asset_latest_name:     jamulus_latest_win.exe
             asset_name:            jamulus_${{ needs.create_release.outputs.version }}_win.exe

    steps:

      ### Setup ###

      # Get the code
      - name:                       Checkout code
        uses:                       actions/checkout@v2

      ### Build ###

      - name:                       "Build deb (Linux)"
        run:                        sh linux/autorelease_linux.sh ${{ github.workspace }}
        if:                         matrix.config.os == 'ubuntu-18.04'
      - name:                       "Build (Windows)"
        run:                        powershell .\windows\autorelease_windows.ps1 -sourcepath "${{ github.workspace }}"
        if:                         matrix.config.os == 'windows-latest'
      - name:                       "Build (macOS)"
        run:                        sh mac/autorelease_mac.sh ${{ github.workspace }}
        if:                         matrix.config.os == 'macos-10.15'

      ### Upload releases ###

      ## Upload assets to the release which is tagged with the tag that triggered this action.
      - name:                       Upload Release Asset 1
        id:                         upload-release-asset
        uses:                       actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:               ${{ needs.create_release.outputs.upload_url }} # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path:               ${{ matrix.config.asset_path }}
          asset_name:               ${{ matrix.config.asset_name }}
          asset_content_type:       application/octet-stream

      # There might be two assets (at least for Debian)
      - name:                       Upload Release Asset 2
        if:                         matrix.config.asset_name_two != null
        id:                         upload-release-asset-two
        uses:                       actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:               ${{ needs.create_release.outputs.upload_url }}
          asset_path:               ${{ matrix.config.asset_path_two }}
          asset_name:               ${{ matrix.config.asset_name_two }}
          asset_content_type:       application/octet-stream

      ## Upload assets latest release
      - name:                       Upload latest Release Asset 1
        id:                         upload-latest-release-asset
        uses:                       actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:               ${{ needs.create_release.outputs.upload_latest_url }} # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path:               ${{ matrix.config.asset_path }}
          asset_name:               ${{ matrix.config.asset_latest_name }}
          asset_content_type:       application/octet-stream
      - name:                       Upload latest Release Asset 2
        if:                         matrix.config.asset_latest_name_two != null
        id:                         upload-latest-release-asset-two
        uses:                       actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:               ${{ needs.create_release.outputs.upload_latest_url }}
          asset_path:               ${{ matrix.config.asset_path_two }}
          asset_name:               ${{ matrix.config.asset_latest_name_two }}
          asset_content_type:       application/octet-stream
